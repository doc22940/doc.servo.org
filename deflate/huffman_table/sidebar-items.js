initSidebarItems({"constant":[["BASE_LENGTH",""],["DISTANCE_BASE",""],["DISTANCE_CODES",""],["END_OF_BLOCK_POSITION",""],["FIXED_CODE_LENGTHS_DISTANCE",""],["LENGTH_BITS_START",""],["LENGTH_CODE",""],["LENGTH_EXTRA_BITS_LENGTH",""],["MAX_CODE_LENGTH",""],["MAX_DISTANCE",""],["MAX_MATCH",""],["MIN_DISTANCE",""],["MIN_MATCH",""],["NUM_DISTANCE_CODES",""],["NUM_LENGTH_CODES",""],["NUM_LITERALS_AND_LENGTHS",""]],"fn":[["build_length_count_table","Counts the number of values of each length. Returns a tuple containing the longest length value in the table, it's position, and fills in lengths in the `len_counts` slice. Returns an error if `table` is empty, or if any of the lengths exceed 15."],["create_codes_in_place","Generats a vector of huffman codes given a table of bit lengths Returns an error if any of the lengths are > 15"],["get_distance_code","Get the spot in the huffman table for distances `distance` corresponds to Returns 255 if the distance is invalid. Avoiding option here for simplicity and performance) as this being called with an invalid value would be a bug."],["get_distance_code_and_extra_bits",""],["get_length_code","Get the length code that corresponds to the length value Panics if length is out of range."],["get_length_code_and_extra_bits","Get the code for the huffman table and the extra bits for the requested length."],["num_extra_bits_for_distance_code","Get the number of extra bits used for a distance code. (Code numbers above `NUM_DISTANCE_CODES` will give some garbage value.)"],["num_extra_bits_for_length_code",""]],"static":[["FIXED_CODE_LENGTHS",""]],"struct":[["ExtraBits","A struct representing the data needed to generate the bit codes for a given value and huffman table."],["HuffmanCode",""],["HuffmanTable","A structure containing the tables of huffman codes for lengths, literals and distances"]]});