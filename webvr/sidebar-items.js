initSidebarItems({"mod":[["webvr_thread",""]],"struct":[["VRExternalShmemPtr",""],["VRServiceManager",""],["WebVRCompositorHandler",""],["WebVRThread","WebVRThread owns native VRDisplays, handles their life cycle inside Servo and acts a doorman for untrusted VR requests from DOM Objects. These are the key components    * WebVRThread::spawn() creates a long living thread that waits for VR Commands from DOM objects      and handles them in its trusted thread. The back and forth comunication with DOM is implemented      using IPC-channels. This thread creates the VRServiceManager instance, which handles the life cycle      of all VR Vendor SDKs and owns all the native VRDisplays. These displays are guaranteed to live while      the spawned thread is alive. The WebVRThread is unique and it's closed using the Exit message when the      whole browser is going to be closed.    * A Event Polling thread is created in order to implement WebVR Events (connected, disconnected,..).      This thread wakes up the WebVRThread from time to time by sending a PollEvents message. This thread      is only created when there is at least one live JavaScript context using the WebVR APIs and shuts down it when      the tab is closed. A single instance of the thread is used to handle multiple JavaScript contexts.      Constellation channel is used to notify events to the Script Thread.    * When the WeVR APIs are used in a tab, it's pipeline_id is registered using the RegisterContext message. When      the tab is closed, UnregisterContext message is sent. This way the WebVR thread has a list of the pipeline      ids using the WebVR APIs. These ids are used to implement privacy guidelines defined in the WebVR Spec.    * When a JavaScript thread gains access to present to a headset, WebVRThread is not used as a intermediary in      the VRDisplay.requestAnimationFrame loop in order to minimize latency. A direct communication with WebRender      is used instead. See WebVRCompositorHandler and the WebVRCommands for more details."]],"trait":[["VRMainThreadHeartbeat","Each VR service may have some code which needs to run on the main thread, for example window creation on MacOS is only supported on the main thread. Implementations of this trait will usually be neither `Sync` nor `Send`."],["VRService",""]]});