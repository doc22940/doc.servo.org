initSidebarItems({"constant":[["PICTURE_TEXTURE_ADD_SLICES",""],["PICTURE_TILE_FORMAT","The chosen image format for picture tiles."],["RECLAIM_THRESHOLD_BYTES",""],["TEXTURE_REGION_DIMENSIONS","The size of each region/layer in shared cache texture arrays."],["TEXTURE_REGION_PIXELS","The number of pixels in a region. Derived from the above."],["_IMPL_SERIALIZE_FOR_CacheEntry",""],["_IMPL_SERIALIZE_FOR_EntryDetails",""],["_IMPL_SERIALIZE_FOR_EntryHandles",""],["_IMPL_SERIALIZE_FOR_Eviction",""],["_IMPL_SERIALIZE_FOR_EvictionNotice",""],["_IMPL_SERIALIZE_FOR_PerDocumentData",""],["_IMPL_SERIALIZE_FOR_SharedTextures",""],["_IMPL_SERIALIZE_FOR_SlabSize",""],["_IMPL_SERIALIZE_FOR_TextureArray",""],["_IMPL_SERIALIZE_FOR_TextureArrayUnit",""],["_IMPL_SERIALIZE_FOR_TextureCache",""],["_IMPL_SERIALIZE_FOR_TextureLocation",""],["_IMPL_SERIALIZE_FOR_TextureRegion",""],["_IMPL_SERIALIZE_FOR_WholeTextureArray",""],["_IMPL_SERIALIZE_FOR_WholeTextureSlice",""]],"enum":[["CacheEntryMarker",""],["EntryDetails","Items in the texture cache can either be standalone textures, or a sub-rect inside the shared cache."],["EntryKind","Tag identifying standalone-versus-shared, without the details."],["Eviction","Describes the eviction policy for a given entry in the texture cache."]],"fn":[["quantize_dimension",""]],"struct":[["CacheAllocParams","Container struct for the various parameters used in cache allocation."],["CacheEntry",""],["EntryHandles","Lists of strong handles owned by the texture cache. There is only one strong handle for each entry, but unlimited weak handles. Consumers receive the weak handles, and `TextureCache` owns the strong handles internally."],["EvictionNotice",""],["EvictionThreshold","Criterion to determine whether a cache entry should be evicted. Generated with `EvictionThresholdBuilder`."],["EvictionThresholdBuilder","Helper to generate an `EvictionThreshold` with the desired policy."],["PerDocumentData",""],["SharedTextures","A set of lazily allocated, fixed size, texture arrays for each format the texture cache supports."],["SlabSize",""],["TextureArray","A texture array contains a number of textures, each with a number of layers, where each layer contains a region that can act as a slab allocator."],["TextureArrayUnit",""],["TextureCache","General-purpose manager for images in GPU memory. This includes images, rasterized glyphs, rasterized blobs, cached render tasks, etc."],["TextureLocation",""],["TextureRegion","A region corresponds to a layer in a shared cache texture."],["WholeTextureArray","A texture array that allocates whole slices and doesn't do any region tracking."],["WholeTextureSlice","A tracking structure for each slice in `WholeTextureArray`."]],"type":[["TextureCacheHandle","A texture cache handle is a weak reference to a cache entry."]]});