var ALIASES = {};
ALIASES["accountable_refcell"] = {};
ALIASES["adler32"] = {};
ALIASES["aho_corasick"] = {};
ALIASES["alloc_no_stdlib"] = {"]":[{'crate':'alloc_no_stdlib','ty':8,'name':'IndexMut','desc':'Used for indexing operations (`container[index]`) in…','p':'alloc_no_stdlib::allocated_memory'},{'crate':'alloc_no_stdlib','ty':8,'name':'Index','desc':'Used for indexing operations (`container[index]`) in…','p':'alloc_no_stdlib::allocated_memory'}],"[":[{'crate':'alloc_no_stdlib','ty':8,'name':'IndexMut','desc':'Used for indexing operations (`container[index]`) in…','p':'alloc_no_stdlib::allocated_memory'},{'crate':'alloc_no_stdlib','ty':8,'name':'Index','desc':'Used for indexing operations (`container[index]`) in…','p':'alloc_no_stdlib::allocated_memory'}],"[]":[{'crate':'alloc_no_stdlib','ty':8,'name':'IndexMut','desc':'Used for indexing operations (`container[index]`) in…','p':'alloc_no_stdlib::allocated_memory'},{'crate':'alloc_no_stdlib','ty':8,'name':'Index','desc':'Used for indexing operations (`container[index]`) in…','p':'alloc_no_stdlib::allocated_memory'}],"..":[{'crate':'alloc_no_stdlib','ty':3,'name':'Range','desc':'A (half-open) range bounded inclusively below and…','p':'alloc_no_stdlib::allocated_memory'}],};
ALIASES["alloc_stdlib"] = {};
ALIASES["andrew"] = {};
ALIASES["antidote"] = {};
ALIASES["app_units"] = {};
ALIASES["approx"] = {};
ALIASES["array_init"] = {};
ALIASES["arrayvec"] = {};
ALIASES["ash"] = {};
ALIASES["atom"] = {};
ALIASES["atomic_refcell"] = {};
ALIASES["atty"] = {};
ALIASES["background_hang_monitor"] = {};
ALIASES["backtrace"] = {};
ALIASES["backtrace_sys"] = {};
ALIASES["base64"] = {};
ALIASES["binary_space_partition"] = {};
ALIASES["bincode"] = {};
ALIASES["bitflags"] = {};
ALIASES["block_buffer"] = {};
ALIASES["block_padding"] = {};
ALIASES["bluetooth"] = {};
ALIASES["bluetooth_traits"] = {};
ALIASES["blurmock"] = {};
ALIASES["blurz"] = {};
ALIASES["boxfnonce"] = {};
ALIASES["brotli"] = {};
ALIASES["brotli_decompressor"] = {};
ALIASES["byte_slice_cast"] = {};
ALIASES["byte_tools"] = {};
ALIASES["byteorder"] = {};
ALIASES["bytes"] = {};
ALIASES["c2_chacha"] = {};
ALIASES["canvas"] = {};
ALIASES["canvas_traits"] = {};
ALIASES["caseless"] = {};
ALIASES["cfg_if"] = {};
ALIASES["chrono"] = {};
ALIASES["clipboard"] = {};
ALIASES["color_quant"] = {};
ALIASES["colorful"] = {};
ALIASES["compositing"] = {};
ALIASES["constellation"] = {};
ALIASES["content_security_policy"] = {};
ALIASES["cookie"] = {};
ALIASES["copyless"] = {};
ALIASES["crc"] = {};
ALIASES["crc32fast"] = {};
ALIASES["crossbeam_channel"] = {};
ALIASES["crossbeam_deque"] = {};
ALIASES["crossbeam_epoch"] = {};
ALIASES["crossbeam_queue"] = {};
ALIASES["crossbeam_utils"] = {};
ALIASES["cssparser"] = {};
ALIASES["cssparser_macros"] = {};
ALIASES["cstr"] = {};
ALIASES["cstr_macros"] = {};
ALIASES["darling"] = {};
ALIASES["darling_core"] = {};
ALIASES["darling_macro"] = {};
ALIASES["data_url"] = {};
ALIASES["dbus"] = {};
ALIASES["debug_unreachable"] = {};
ALIASES["debugger"] = {};
ALIASES["deflate"] = {};
ALIASES["deny_public_fields"] = {};
ALIASES["derive_common"] = {};
ALIASES["derive_more"] = {};
ALIASES["device"] = {};
ALIASES["devtools"] = {};
ALIASES["devtools_traits"] = {};
ALIASES["digest"] = {};
ALIASES["dirs"] = {};
ALIASES["dirs_sys"] = {};
ALIASES["dlib"] = {};
ALIASES["dom_struct"] = {};
ALIASES["domobject_derive"] = {};
ALIASES["downcast_rs"] = {};
ALIASES["dtoa"] = {};
ALIASES["dtoa_short"] = {};
ALIASES["either"] = {};
ALIASES["embedder_traits"] = {};
ALIASES["encoding_rs"] = {};
ALIASES["enum_iterator"] = {};
ALIASES["enum_iterator_derive"] = {};
ALIASES["env_logger"] = {};
ALIASES["euclid"] = {};
ALIASES["expat_sys"] = {};
ALIASES["fake_simd"] = {};
ALIASES["fallible"] = {};
ALIASES["fixedbitset"] = {};
ALIASES["flate2"] = {};
ALIASES["float_ord"] = {};
ALIASES["fnv"] = {};
ALIASES["font_kit"] = {};
ALIASES["fontconfig"] = {};
ALIASES["fontconfig_sys"] = {};
ALIASES["fontsan"] = {};
ALIASES["foreign_types"] = {};
ALIASES["foreign_types_shared"] = {};
ALIASES["freetype"] = {};
ALIASES["freetype_sys"] = {};
ALIASES["futf"] = {};
ALIASES["futures"] = {};
ALIASES["futures_channel"] = {};
ALIASES["futures_core"] = {};
ALIASES["futures_cpupool"] = {};
ALIASES["futures_executor"] = {};
ALIASES["futures_macro"] = {};
ALIASES["futures_sink"] = {};
ALIASES["futures_task"] = {};
ALIASES["futures_util"] = {};
ALIASES["fxhash"] = {};
ALIASES["gaol"] = {};
ALIASES["generic_array"] = {};
ALIASES["getopts"] = {};
ALIASES["getrandom"] = {};
ALIASES["gfx"] = {};
ALIASES["gfx_backend_empty"] = {};
ALIASES["gfx_backend_vulkan"] = {};
ALIASES["gfx_hal"] = {};
ALIASES["gfx_traits"] = {};
ALIASES["gif"] = {};
ALIASES["gleam"] = {};
ALIASES["glib"] = {};
ALIASES["glib_sys"] = {};
ALIASES["glutin"] = {};
ALIASES["glutin_egl_sys"] = {};
ALIASES["glutin_glx_sys"] = {};
ALIASES["gobject_sys"] = {};
ALIASES["gstreamer"] = {};
ALIASES["gstreamer_app"] = {};
ALIASES["gstreamer_app_sys"] = {};
ALIASES["gstreamer_audio"] = {};
ALIASES["gstreamer_audio_sys"] = {};
ALIASES["gstreamer_base"] = {};
ALIASES["gstreamer_base_sys"] = {};
ALIASES["gstreamer_gl"] = {};
ALIASES["gstreamer_gl_sys"] = {};
ALIASES["gstreamer_player"] = {};
ALIASES["gstreamer_player_sys"] = {};
ALIASES["gstreamer_sdp"] = {};
ALIASES["gstreamer_sdp_sys"] = {};
ALIASES["gstreamer_sys"] = {};
ALIASES["gstreamer_video"] = {};
ALIASES["gstreamer_video_sys"] = {};
ALIASES["gstreamer_webrtc"] = {};
ALIASES["gstreamer_webrtc_sys"] = {};
ALIASES["h2"] = {};
ALIASES["half"] = {};
ALIASES["harfbuzz_sys"] = {};
ALIASES["hashglobe"] = {};
ALIASES["headers"] = {};
ALIASES["headers_core"] = {};
ALIASES["heartbeats_simple"] = {};
ALIASES["heartbeats_simple_sys"] = {};
ALIASES["hex"] = {};
ALIASES["hibitset"] = {};
ALIASES["histogram"] = {};
ALIASES["html5ever"] = {};
ALIASES["http"] = {};
ALIASES["http_body"] = {};
ALIASES["httparse"] = {};
ALIASES["humantime"] = {};
ALIASES["hyper"] = {};
ALIASES["hyper_openssl"] = {};
ALIASES["hyper_serde"] = {};
ALIASES["ident_case"] = {};
ALIASES["idna"] = {};
ALIASES["image"] = {};
ALIASES["immeta"] = {};
ALIASES["indexmap"] = {};
ALIASES["inflate"] = {};
ALIASES["influent"] = {};
ALIASES["iovec"] = {};
ALIASES["ipc_channel"] = {};
ALIASES["itertools"] = {};
ALIASES["itoa"] = {};
ALIASES["jemalloc_sys"] = {};
ALIASES["jpeg_decoder"] = {};
ALIASES["jstraceable_derive"] = {};
ALIASES["keyboard_types"] = {};
ALIASES["layout"] = {};
ALIASES["layout_thread"] = {};
ALIASES["layout_traits"] = {};
ALIASES["lazy_static"] = {};
ALIASES["lazycell"] = {};
ALIASES["libc"] = {};
ALIASES["libdbus_sys"] = {};
ALIASES["libflate"] = {};
ALIASES["libloading"] = {};
ALIASES["libz_sys"] = {};
ALIASES["line_drawing"] = {};
ALIASES["linked_hash_map"] = {};
ALIASES["linked_hash_set"] = {};
ALIASES["lock_api"] = {};
ALIASES["log"] = {};
ALIASES["lyon_geom"] = {};
ALIASES["lyon_path"] = {};
ALIASES["lzw"] = {};
ALIASES["mac"] = {};
ALIASES["malloc_size_of"] = {};
ALIASES["malloc_size_of_derive"] = {};
ALIASES["markup5ever"] = {};
ALIASES["matches"] = {};
ALIASES["media"] = {};
ALIASES["memchr"] = {};
ALIASES["memmap"] = {};
ALIASES["memoffset"] = {};
ALIASES["metrics"] = {};
ALIASES["mime"] = {};
ALIASES["mime_guess"] = {};
ALIASES["miniz_oxide"] = {};
ALIASES["miniz_oxide_c_api"] = {};
ALIASES["miniz_sys"] = {};
ALIASES["mio"] = {};
ALIASES["mio_extras"] = {};
ALIASES["mio_uds"] = {};
ALIASES["mitochondria"] = {};
ALIASES["mozangle"] = {};
ALIASES["mozjs"] = {};
ALIASES["mozjs_sys"] = {};
ALIASES["msg"] = {};
ALIASES["muldiv"] = {};
ALIASES["net"] = {};
ALIASES["net2"] = {};
ALIASES["net_traits"] = {};
ALIASES["nix"] = {};
ALIASES["nodrop"] = {};
ALIASES["num_cpus"] = {};
ALIASES["num_derive"] = {};
ALIASES["num_integer"] = {};
ALIASES["num_iter"] = {};
ALIASES["num_rational"] = {};
ALIASES["num_traits"] = {};
ALIASES["opaque_debug"] = {};
ALIASES["openssl"] = {};
ALIASES["openssl_sys"] = {};
ALIASES["ordered_float"] = {};
ALIASES["ordermap"] = {};
ALIASES["osmesa_src"] = {};
ALIASES["osmesa_sys"] = {};
ALIASES["owning_ref"] = {};
ALIASES["parking_lot"] = {};
ALIASES["parking_lot_core"] = {};
ALIASES["paste"] = {};
ALIASES["paste_impl"] = {};
ALIASES["peek_poke"] = {};
ALIASES["peek_poke_derive"] = {};
ALIASES["percent_encoding"] = {};
ALIASES["petgraph"] = {};
ALIASES["phf"] = {};
ALIASES["phf_generator"] = {};
ALIASES["phf_macros"] = {};
ALIASES["phf_shared"] = {};
ALIASES["pin_utils"] = {};
ALIASES["pixels"] = {};
ALIASES["plane_split"] = {};
ALIASES["png"] = {};
ALIASES["ppv_lite86"] = {};
ALIASES["precomputed_hash"] = {};
ALIASES["proc_macro2"] = {};
ALIASES["proc_macro_hack"] = {};
ALIASES["proc_macro_nested"] = {};
ALIASES["procedural_masquerade"] = {};
ALIASES["profile"] = {};
ALIASES["profile_traits"] = {};
ALIASES["quick_error"] = {};
ALIASES["quote"] = {};
ALIASES["rand"] = {};
ALIASES["rand_chacha"] = {};
ALIASES["rand_core"] = {};
ALIASES["rand_isaac"] = {};
ALIASES["rand_pcg"] = {};
ALIASES["range"] = {};
ALIASES["raqote"] = {};
ALIASES["raw_window_handle"] = {};
ALIASES["rayon"] = {};
ALIASES["rayon_core"] = {};
ALIASES["ref_filter_map"] = {};
ALIASES["ref_slice"] = {};
ALIASES["regex"] = {};
ALIASES["regex_syntax"] = {};
ALIASES["relevant"] = {};
ALIASES["remove_dir_all"] = {};
ALIASES["rendy_descriptor"] = {};
ALIASES["rendy_memory"] = {};
ALIASES["rle_decode_fast"] = {};
ALIASES["ron"] = {};
ALIASES["rust_webvr"] = {};
ALIASES["rust_webvr_api"] = {};
ALIASES["rustc_demangle"] = {};
ALIASES["rusttype"] = {};
ALIASES["same_file"] = {};
ALIASES["scoped_threadpool"] = {};
ALIASES["scoped_tls"] = {};
ALIASES["scopeguard"] = {};
ALIASES["script"] = {};
ALIASES["script_layout_interface"] = {};
ALIASES["script_plugins"] = {};
ALIASES["script_traits"] = {};
ALIASES["selectors"] = {};
ALIASES["serde"] = {"?":[{'crate':'serde','ty':8,'name':'Try','desc':'A trait for customizing the behavior of the `?` operator.','p':'serde::lib::core::ops'},{'crate':'serde','ty':14,'name':'try','desc':'Unwraps a result or propagates its error.','p':'serde::lib::core'}],"..=":[{'crate':'serde','ty':3,'name':'RangeInclusive','desc':'A range bounded inclusively below and above (`start..=end`).','p':'serde::lib'},{'crate':'serde','ty':3,'name':'RangeInclusive','desc':'A range bounded inclusively below and above (`start..=end`).','p':'serde::lib::core::ops'},{'crate':'serde','ty':3,'name':'RangeToInclusive','desc':'A range only bounded inclusively above (`..=end`).','p':'serde::lib::core::ops'}],">=":[{'crate':'serde','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'serde::lib::cmp'},{'crate':'serde','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'serde::lib::cmp'},{'crate':'serde','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'serde::lib::core::prelude::v1'},{'crate':'serde','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'serde::lib::core::prelude::v1'},{'crate':'serde','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'serde::lib::core::cmp'},{'crate':'serde','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'serde::lib::core::cmp'}],"*":[{'crate':'serde','ty':8,'name':'Mul','desc':'The multiplication operator `*`.','p':'serde::lib::core::ops'},{'crate':'serde','ty':8,'name':'MulAssign','desc':'The multiplication assignment operator `*=`.','p':'serde::lib::core::ops'},{'crate':'serde','ty':8,'name':'Deref','desc':'Used for immutable dereferencing operations, like `*v`.','p':'serde::lib::core::ops'},{'crate':'serde','ty':8,'name':'DerefMut','desc':'Used for mutable dereferencing operations, like in `*v =…','p':'serde::lib::core::ops'}],"^=":[{'crate':'serde','ty':8,'name':'BitXorAssign','desc':'The bitwise XOR assignment operator `^=`.','p':'serde::lib::core::ops'}],">":[{'crate':'serde','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'serde::lib::cmp'},{'crate':'serde','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'serde::lib::cmp'},{'crate':'serde','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'serde::lib::core::prelude::v1'},{'crate':'serde','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'serde::lib::core::prelude::v1'},{'crate':'serde','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'serde::lib::core::cmp'},{'crate':'serde','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'serde::lib::core::cmp'}],"<=":[{'crate':'serde','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'serde::lib::cmp'},{'crate':'serde','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'serde::lib::cmp'},{'crate':'serde','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'serde::lib::core::prelude::v1'},{'crate':'serde','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'serde::lib::core::prelude::v1'},{'crate':'serde','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'serde::lib::core::cmp'},{'crate':'serde','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'serde::lib::core::cmp'}],"^":[{'crate':'serde','ty':8,'name':'BitXor','desc':'The bitwise XOR operator `^`.','p':'serde::lib::core::ops'}],"&=":[{'crate':'serde','ty':8,'name':'BitAndAssign','desc':'The bitwise AND assignment operator `&=`.','p':'serde::lib::core::ops'}],"[]":[{'crate':'serde','ty':8,'name':'Index','desc':'Used for indexing operations (`container[index]`) in…','p':'serde::lib::core::ops'},{'crate':'serde','ty':8,'name':'IndexMut','desc':'Used for indexing operations (`container[index]`) in…','p':'serde::lib::core::ops'}],"+":[{'crate':'serde','ty':8,'name':'Add','desc':'The addition operator `+`.','p':'serde::lib::core::ops'},{'crate':'serde','ty':8,'name':'AddAssign','desc':'The addition assignment operator `+=`.','p':'serde::lib::core::ops'}],"%":[{'crate':'serde','ty':8,'name':'Rem','desc':'The remainder operator `%`.','p':'serde::lib::core::ops'},{'crate':'serde','ty':8,'name':'RemAssign','desc':'The remainder assignment operator `%=`.','p':'serde::lib::core::ops'}],">>=":[{'crate':'serde','ty':8,'name':'ShrAssign','desc':'The right shift assignment operator `>>=`.','p':'serde::lib::core::ops'}],"/":[{'crate':'serde','ty':8,'name':'Div','desc':'The division operator `/`.','p':'serde::lib::core::ops'},{'crate':'serde','ty':8,'name':'DivAssign','desc':'The division assignment operator `/=`.','p':'serde::lib::core::ops'}],"..":[{'crate':'serde','ty':3,'name':'Range','desc':'A (half-open) range bounded inclusively below and…','p':'serde::lib'},{'crate':'serde','ty':3,'name':'Range','desc':'A (half-open) range bounded inclusively below and…','p':'serde::lib::core::ops'},{'crate':'serde','ty':3,'name':'RangeFrom','desc':'A range only bounded inclusively below (`start..`).','p':'serde::lib::core::ops'},{'crate':'serde','ty':3,'name':'RangeFull','desc':'An unbounded range (`..`).','p':'serde::lib::core::ops'},{'crate':'serde','ty':3,'name':'RangeTo','desc':'A range only bounded exclusively above (`..end`).','p':'serde::lib::core::ops'}],"[":[{'crate':'serde','ty':8,'name':'Index','desc':'Used for indexing operations (`container[index]`) in…','p':'serde::lib::core::ops'},{'crate':'serde','ty':8,'name':'IndexMut','desc':'Used for indexing operations (`container[index]`) in…','p':'serde::lib::core::ops'}],"<<":[{'crate':'serde','ty':8,'name':'Shl','desc':'The left shift operator `<<`. Note that because this trait…','p':'serde::lib::core::ops'}],"{}":[{'crate':'serde','ty':8,'name':'Display','desc':'Format trait for an empty format, `{}`.','p':'serde::lib::fmt'},{'crate':'serde','ty':8,'name':'Display','desc':'Format trait for an empty format, `{}`.','p':'serde::lib'},{'crate':'serde','ty':8,'name':'Display','desc':'Format trait for an empty format, `{}`.','p':'serde::lib::core::fmt'}],"<":[{'crate':'serde','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'serde::lib::cmp'},{'crate':'serde','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'serde::lib::cmp'},{'crate':'serde','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'serde::lib::core::prelude::v1'},{'crate':'serde','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'serde::lib::core::prelude::v1'},{'crate':'serde','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'serde::lib::core::cmp'},{'crate':'serde','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'serde::lib::core::cmp'}],"*=":[{'crate':'serde','ty':8,'name':'MulAssign','desc':'The multiplication assignment operator `*=`.','p':'serde::lib::core::ops'}],"&":[{'crate':'serde','ty':8,'name':'BitAnd','desc':'The bitwise AND operator `&`.','p':'serde::lib::core::ops'}],"|=":[{'crate':'serde','ty':8,'name':'BitOrAssign','desc':'The bitwise OR assignment operator `|=`.','p':'serde::lib::core::ops'}],"|":[{'crate':'serde','ty':8,'name':'BitOr','desc':'The bitwise OR operator `|`.','p':'serde::lib::core::ops'}],"&*":[{'crate':'serde','ty':8,'name':'Deref','desc':'Used for immutable dereferencing operations, like `*v`.','p':'serde::lib::core::ops'}],">>":[{'crate':'serde','ty':8,'name':'Shr','desc':'The right shift operator `>>`. Note that because this…','p':'serde::lib::core::ops'}],"-=":[{'crate':'serde','ty':8,'name':'SubAssign','desc':'The subtraction assignment operator `-=`.','p':'serde::lib::core::ops'}],"==":[{'crate':'serde','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial…','p':'serde::lib::cmp'},{'crate':'serde','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence…','p':'serde::lib::cmp'},{'crate':'serde','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence…','p':'serde::lib::core::prelude::v1'},{'crate':'serde','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial…','p':'serde::lib::core::prelude::v1'},{'crate':'serde','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial…','p':'serde::lib::core::cmp'},{'crate':'serde','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence…','p':'serde::lib::core::cmp'}],"!=":[{'crate':'serde','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial…','p':'serde::lib::cmp'},{'crate':'serde','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence…','p':'serde::lib::cmp'},{'crate':'serde','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence…','p':'serde::lib::core::prelude::v1'},{'crate':'serde','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial…','p':'serde::lib::core::prelude::v1'},{'crate':'serde','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial…','p':'serde::lib::core::cmp'},{'crate':'serde','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence…','p':'serde::lib::core::cmp'}],"-":[{'crate':'serde','ty':8,'name':'Neg','desc':'The unary negation operator `-`.','p':'serde::lib::core::ops'},{'crate':'serde','ty':8,'name':'Sub','desc':'The subtraction operator `-`.','p':'serde::lib::core::ops'},{'crate':'serde','ty':8,'name':'SubAssign','desc':'The subtraction assignment operator `-=`.','p':'serde::lib::core::ops'}],"+=":[{'crate':'serde','ty':8,'name':'AddAssign','desc':'The addition assignment operator `+=`.','p':'serde::lib::core::ops'}],"{:?}":[{'crate':'serde','ty':8,'name':'Debug','desc':'`?` formatting.','p':'serde::lib::fmt'},{'crate':'serde','ty':8,'name':'Debug','desc':'`?` formatting.','p':'serde::lib'},{'crate':'serde','ty':8,'name':'Debug','desc':'`?` formatting.','p':'serde::lib::core::fmt'}],"%=":[{'crate':'serde','ty':8,'name':'RemAssign','desc':'The remainder assignment operator `%=`.','p':'serde::lib::core::ops'}],"/=":[{'crate':'serde','ty':8,'name':'DivAssign','desc':'The division assignment operator `/=`.','p':'serde::lib::core::ops'}],"<<=":[{'crate':'serde','ty':8,'name':'ShlAssign','desc':'The left shift assignment operator `<<=`.','p':'serde::lib::core::ops'}],"]":[{'crate':'serde','ty':8,'name':'Index','desc':'Used for indexing operations (`container[index]`) in…','p':'serde::lib::core::ops'},{'crate':'serde','ty':8,'name':'IndexMut','desc':'Used for indexing operations (`container[index]`) in…','p':'serde::lib::core::ops'}],};
ALIASES["serde_bytes"] = {};
ALIASES["serde_derive"] = {};
ALIASES["serde_json"] = {};
ALIASES["serde_urlencoded"] = {};
ALIASES["servo"] = {};
ALIASES["servo_allocator"] = {};
ALIASES["servo_arc"] = {};
ALIASES["servo_atoms"] = {};
ALIASES["servo_config"] = {};
ALIASES["servo_config_plugins"] = {};
ALIASES["servo_geometry"] = {};
ALIASES["servo_media"] = {};
ALIASES["servo_media_audio"] = {};
ALIASES["servo_media_derive"] = {};
ALIASES["servo_media_gstreamer"] = {};
ALIASES["servo_media_gstreamer_render"] = {};
ALIASES["servo_media_gstreamer_render_unix"] = {};
ALIASES["servo_media_player"] = {};
ALIASES["servo_media_streams"] = {};
ALIASES["servo_media_traits"] = {};
ALIASES["servo_media_webrtc"] = {};
ALIASES["servo_rand"] = {};
ALIASES["servo_remutex"] = {};
ALIASES["servo_url"] = {};
ALIASES["sha1"] = {};
ALIASES["sha2"] = {};
ALIASES["shared_library"] = {};
ALIASES["shellwords"] = {};
ALIASES["sig"] = {};
ALIASES["signpost"] = {};
ALIASES["siphasher"] = {};
ALIASES["slab"] = {};
ALIASES["smallbitvec"] = {};
ALIASES["smallvec"] = {};
ALIASES["smithay_client_toolkit"] = {};
ALIASES["sparkle"] = {};
ALIASES["speexdsp_resampler"] = {};
ALIASES["stable_deref_trait"] = {};
ALIASES["stb_truetype"] = {};
ALIASES["string"] = {};
ALIASES["string_cache"] = {};
ALIASES["style"] = {};
ALIASES["style_derive"] = {};
ALIASES["style_traits"] = {};
ALIASES["surfman"] = {};
ALIASES["surfman_chains"] = {};
ALIASES["surfman_chains_api"] = {};
ALIASES["svg_fmt"] = {};
ALIASES["sw_composite"] = {};
ALIASES["swapper"] = {};
ALIASES["syn"] = {};
ALIASES["synstructure"] = {};
ALIASES["take_mut"] = {};
ALIASES["tempfile"] = {};
ALIASES["tendril"] = {};
ALIASES["termcolor"] = {};
ALIASES["thin_slice"] = {};
ALIASES["thread_local"] = {};
ALIASES["thread_profiler"] = {};
ALIASES["tiff"] = {};
ALIASES["time"] = {};
ALIASES["tinyfiledialogs"] = {};
ALIASES["to_shmem"] = {};
ALIASES["to_shmem_derive"] = {};
ALIASES["tokio"] = {};
ALIASES["tokio_buf"] = {};
ALIASES["tokio_codec"] = {};
ALIASES["tokio_current_thread"] = {};
ALIASES["tokio_executor"] = {};
ALIASES["tokio_fs"] = {};
ALIASES["tokio_io"] = {};
ALIASES["tokio_openssl"] = {};
ALIASES["tokio_reactor"] = {};
ALIASES["tokio_sync"] = {};
ALIASES["tokio_tcp"] = {};
ALIASES["tokio_threadpool"] = {};
ALIASES["tokio_timer"] = {};
ALIASES["tokio_udp"] = {};
ALIASES["tokio_uds"] = {};
ALIASES["try_lock"] = {};
ALIASES["typed_arena"] = {};
ALIASES["typenum"] = {};
ALIASES["ucd"] = {};
ALIASES["ucd_util"] = {};
ALIASES["uluru"] = {};
ALIASES["unicase"] = {};
ALIASES["unicode_bidi"] = {};
ALIASES["unicode_normalization"] = {};
ALIASES["unicode_script"] = {};
ALIASES["unicode_segmentation"] = {};
ALIASES["unicode_xid"] = {};
ALIASES["unreachable"] = {};
ALIASES["unwind_sys"] = {};
ALIASES["url"] = {};
ALIASES["urlencoding"] = {};
ALIASES["utf8"] = {};
ALIASES["utf8_ranges"] = {};
ALIASES["uuid"] = {};
ALIASES["vec_map"] = {};
ALIASES["void"] = {"{}":[{'crate':'void','ty':8,'name':'Display','desc':'Format trait for an empty format, `{}`.','p':'void::coreprovider::fmt'}],">=":[{'crate':'void','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'void::coreprovider::cmp'},{'crate':'void','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'void::coreprovider::cmp'}],"==":[{'crate':'void','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial…','p':'void::coreprovider::cmp'},{'crate':'void','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence…','p':'void::coreprovider::cmp'}],"!=":[{'crate':'void','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial…','p':'void::coreprovider::cmp'},{'crate':'void','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence…','p':'void::coreprovider::cmp'}],">":[{'crate':'void','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'void::coreprovider::cmp'},{'crate':'void','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'void::coreprovider::cmp'}],"<=":[{'crate':'void','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'void::coreprovider::cmp'},{'crate':'void','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'void::coreprovider::cmp'}],"{:?}":[{'crate':'void','ty':8,'name':'Debug','desc':'`?` formatting.','p':'void::coreprovider::fmt'}],"<":[{'crate':'void','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'void::coreprovider::cmp'},{'crate':'void','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'void::coreprovider::cmp'}],};
ALIASES["walkdir"] = {};
ALIASES["want"] = {};
ALIASES["warp"] = {};
ALIASES["wayland_client"] = {};
ALIASES["wayland_commons"] = {};
ALIASES["wayland_protocols"] = {};
ALIASES["wayland_sys"] = {};
ALIASES["webdriver"] = {};
ALIASES["webdriver_server"] = {};
ALIASES["webgpu"] = {};
ALIASES["webrender"] = {};
ALIASES["webrender_api"] = {};
ALIASES["webrender_build"] = {};
ALIASES["webrender_traits"] = {};
ALIASES["webvr"] = {};
ALIASES["webvr_traits"] = {};
ALIASES["webxr"] = {};
ALIASES["webxr_api"] = {};
ALIASES["wgpu_core"] = {};
ALIASES["winit"] = {};
ALIASES["wr_malloc_size_of"] = {};
ALIASES["ws"] = {};
ALIASES["x11"] = {};
ALIASES["x11_clipboard"] = {};
ALIASES["x11_dl"] = {};
ALIASES["xcb"] = {};
ALIASES["xdg"] = {};
ALIASES["xi_unicode"] = {};
ALIASES["xml"] = {};
ALIASES["xml5ever"] = {};
